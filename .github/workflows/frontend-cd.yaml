name: Frontend Continuous Deployment

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    types: [closed]
    
env:
  AWS_REGION: us-east-1
    
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - run: cd starter/frontend && npm ci
      - run: cd starter/frontend && npm run lint -- --fix
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3      
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      
      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - run: cd starter/frontend && npm ci
      - run: cd starter/frontend/src && npm test -- --passWithNoTests
      
  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: ${{ env.AWS_REGION }}      
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: latest
          REACT_APP_MOVIE_API_URL: '/home'
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG starter/frontend --build-arg REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG      
      
      